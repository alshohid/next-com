// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model brands {
  id        Int        @id @default(autoincrement())
  brandName String     @unique @db.VarChar(50)
  brandImg  String     @db.VarChar(300)
  products  products[]
  createdAt DateTime   @default(now()) @db.Timestamp(0)
  updatedAt DateTime   @default(now()) @updatedAt @db.Timestamp(0)
}

model categories {
  id           Int        @id @default(autoincrement())
  categoryName String     @unique @db.VarChar(50)
  categoryImg  String     @db.VarChar(300)
  products     products[]
  createdAt    DateTime   @default(now()) @db.Timestamp(0)
  updatedAt    DateTime   @default(now()) @updatedAt @db.Timestamp(0)
}

model products {
  id              Int               @id @default(autoincrement())
  title           String            @db.VarChar(200)
  short_des       String            @db.VarChar(500)
  price           Float
  discount        Boolean
  discount_price  Float
  image           String            @db.VarChar(200)
  stock           Boolean
  star            Float
  remark          products_remark
  category_id     Int
  categories      categories        @relation(fields: [category_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  brand_id        Int
  brands          brands            @relation(fields: [brand_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  product_details product_details?
  product_sliders product_sliders?
  product_reviews product_reviews[]
  product_wishes  product_wishes[]
  createdAt       DateTime          @default(now()) @db.Timestamp(0)
  updatedAt       DateTime          @default(now()) @updatedAt @db.Timestamp(0)
}

model product_sliders {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(200)
  short_des  String   @db.VarChar(500)
  price      String   @db.VarChar(100)
  image      String   @db.VarChar(200)
  product_id Int      @unique
  createdAt  DateTime @default(now()) @db.Timestamp(0)
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamp(0)
  products   products @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model product_details {
  id         Int      @id @default(autoincrement())
  img1       String   @db.VarChar(200)
  img2       String   @db.VarChar(200)
  img3       String   @db.VarChar(200)
  img4       String   @db.VarChar(200)
  img5       String   @db.VarChar(200)
  img6       String   @db.VarChar(200)
  img7       String   @db.VarChar(200)
  img8       String   @db.VarChar(200)
  des        String   @db.LongText
  color      String   @db.VarChar(200)
  size       String   @db.VarChar(200)
  product_id Int      @unique
  createdAt  DateTime @default(now()) @db.Timestamp(0)
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamp(0)
  products   products @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model users {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  firstName         String
  lastName          String
  password          String
  customer_profiles customer_profiles?
  userRole          userRole[]
  product_wishes    product_wishes[]
  createdAt         DateTime           @default(now()) @db.Timestamp(0)
  updatedAt         DateTime           @default(now()) @updatedAt @db.Timestamp(0)
}

model Role {
  id        Int        @id @default(autoincrement())
  userRole  userRole[]
  createdAt DateTime   @default(now()) @db.Timestamp(0)
  updatedAt DateTime   @default(now()) @updatedAt @db.Timestamp(0)
}

model userRole {
  id        Int      @id @default(autoincrement())
  rol_id    Int
  Role      Role     @relation(fields: [rol_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  user_id   Int
  users     users    @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
}

model customer_profiles {
  id              Int               @id @default(autoincrement())
  cus_name        String            @db.VarChar(100)
  cus_add         String            @db.VarChar(500)
  cus_city        String            @db.VarChar(50)
  cus_state       String            @db.VarChar(50)
  cus_postcode    String            @db.VarChar(50)
  cus_country     String            @db.VarChar(50)
  cus_phone       String            @db.VarChar(50)
  cus_fax         String            @db.VarChar(50)
  ship_name       String            @db.VarChar(100)
  ship_add        String            @db.VarChar(100)
  ship_city       String            @db.VarChar(100)
  ship_state      String            @db.VarChar(100)
  ship_postcode   String            @db.VarChar(100)
  ship_country    String            @db.VarChar(100)
  ship_phone      String            @db.VarChar(50)
  product_reviews product_reviews[]
  user_id         Int               @unique
  users           users             @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdAt       DateTime          @default(now()) @db.Timestamp(0)
  updatedAt       DateTime          @default(now()) @updatedAt @db.Timestamp(0)
}

model product_reviews {
  id                Int               @id @default(autoincrement())
  description       String            @db.VarChar(1000)
  rating            String            @db.VarChar(10)
  customer_id       Int
  product_id        Int
  createdAt         DateTime          @default(now()) @db.Timestamp(0)
  updatedAt         DateTime          @default(now()) @updatedAt @db.Timestamp(0)
  customer_profiles customer_profiles @relation(fields: [customer_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  products          products          @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model product_wishes {
  id         Int      @id @default(autoincrement())
  product_id Int
  user_id    Int
  createdAt  DateTime @default(now()) @db.Timestamp(0)
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamp(0)
  products   products @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

enum products_remark {
  popular
  new
  top
  special
  trending
  regular
}
